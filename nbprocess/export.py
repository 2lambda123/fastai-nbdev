# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_export.ipynb.

# %% auto 0
__all__ = ['extract_comments', 'NotebookProcessor', 'ExportModuleProcessor']

# %% ../nbs/02_export.ipynb 2
#export
from .read import *
from .maker import *

from .imports import *
from fastcore.script import *
from fastcore.imports import *

from collections import defaultdict
from pprint import pformat
import ast,contextlib

# %% ../nbs/02_export.ipynb 7
#export
def extract_comments(ss):
    "Take leading comments from lines of code in `ss`, remove `#`, and split"
    ss = ss.splitlines()
    first_code = first(i for i,o in enumerate(ss) if not o.strip() or re.match('\s*[^#\s]', o))
    return L((s.strip()[1:]).strip().split() for s in ss[:first_code]).filter()

# %% ../nbs/02_export.ipynb 10
#export
class NotebookProcessor:
    "Base class for nbprocess notebook processors"
    def __init__(self, path, debug=False): self.nb,self.path,self.debug = read_nb(path),Path(path),debug

# %% ../nbs/02_export.ipynb 16
#export
@patch
def process_comment(self:NotebookProcessor, comment, cell):
    cmd,*args = comment
    cmd = f"{cmd}_{cell.cell_type}"
    if self.debug: print(cmd, args)
    if not hasattr(self, cmd): return
    try: getattr(self,cmd)(comment,cell, *args)
    except TypeError: pass

# %% ../nbs/02_export.ipynb 19
#export
@patch
def process_cell(self:NotebookProcessor, cell):
    comments = extract_comments(cell.source)
    if not comments: return self.no_cmd(cell)
    for comment in comments: self.process_comment(comment, cell)
    return cell

@patch
def no_cmd(self:NotebookProcessor, cell): return cell

# %% ../nbs/02_export.ipynb 22
#export
@patch
def process(self:NotebookProcessor):
    "Process all cells with `process_cell` and replace `self.nb.cells` with result"
    for i in range_of(self.nb.cells): self.nb.cells[i] = self.process_cell(self.nb.cells[i])

# %% ../nbs/02_export.ipynb 27
#export
class ExportModuleProcessor(NotebookProcessor):
    "A `NotebookProcessor` which exports code to a module"
    def __init__(self, path, dest, mod_maker=ModuleMaker, debug=False):
        dest = Path(dest)
        store_attr()
        super().__init__(path,debug=debug)

    def process(self):
        self.modules,self.in_all = defaultdict(L),defaultdict(L)
        super().process()

# %% ../nbs/02_export.ipynb 30
#export
@patch
def default_exp_code(self:ExportModuleProcessor, comment, cell, exp_to): self.default_exp = exp_to

# %% ../nbs/02_export.ipynb 33
#export
@patch
def exporti_code(self:ExportModuleProcessor, comment, cell, exp_to=None):
    "Export a cell, without including the definition in `__all__`"
    mod = ifnone(exp_to, '#')
    self.modules[mod].append(cell)
    return mod

# %% ../nbs/02_export.ipynb 36
#export
@patch
def export_code(self:ExportModuleProcessor, comment, cell, exp_to=None):
    "Export a cell, adding the definition in `__all__`"
    mod = self.exporti_code(comment, cell, exp_to=exp_to)
    self.in_all[mod].append(cell)

# %% ../nbs/02_export.ipynb 38
#export
@patch
def create_modules(self:ExportModuleProcessor):
    "Create module(s) from notebook"
    self.process()
    for mod,cells in self.modules.items():
        all_cells = self.in_all[mod]
        name = self.default_exp if mod=='#' else mod
        mm = self.mod_maker(dest=self.dest, name=name, nb_path=self.path, is_new=mod=='#')
        mm.make(cells, all_cells)
