# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/07_processors.ipynb.

# %% auto 0
__all__ = ['meta_', 'show_meta', 'insert_warning', 'remove_', 'hide_line', 'process_outputs', 'filter_stream_']

# %% ../nbs/07_processors.ipynb 3
from .read import *
from .imports import *
from .process import *

from fastcore.imports import *
from fastcore.xtras import *

# %% ../nbs/07_processors.ipynb 6
def meta_(nbp, cell, key, *args): cell.metadata[key] = args

# %% ../nbs/07_processors.ipynb 7
def show_meta(cell):
    "Show cell metadata"
    if cell.metadata: print(cell.metadata)

# %% ../nbs/07_processors.ipynb 12
def insert_warning(nb):
    "Insert Autogenerated Warning Into Notebook after the first cell."
    content = "<!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! -->"
    nb.cells.insert(1, AttrDict(cell_type='markdown', metadata={}, source=content))

# %% ../nbs/07_processors.ipynb 15
def remove_(nbp, cell, *args):
    for arg in args:
        if arg=='input': cell['source'] = ''
        elif arg=='output': del(cell['outputs'])
        elif arg=='cell': del(cell['source'])
        else: raise NameError(arg)

# %% ../nbs/07_processors.ipynb 17
_re_hideline = re.compile(r'#\|\s*hide_line\s*$', re.MULTILINE)
def hide_line(cell):
    "Hide lines of code in code cells with the directive `hide_line` at the end of a line of code"
    if cell.cell_type == 'code' and _re_hideline.search(cell.source):
        cell.source = '\n'.join([c for c in cell.source.splitlines() if not _re_hideline.search(c)])

# %% ../nbs/07_processors.ipynb 19
def process_outputs(f, nbp, cell, args=None):
    "Use from a processor to process outputs in `cell`"
    for outp in getattr(cell, 'outputs', []): f(outp, args)

# %% ../nbs/07_processors.ipynb 20
def _filter_stream(outp, args):
    if not args or outp.output_type != 'stream': return
    outp['text'] = [l for l in outp.text if not re.search('|'.join(args), l)]

def filter_stream_(nbp, cell, *words):
    "Remove output lines containing any of `words` in `cell` stream output"
    process_outputs(_filter_stream, nbp, cell, words)
