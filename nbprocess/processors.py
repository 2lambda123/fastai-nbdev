# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/07_processors.ipynb.

# %% auto 0
__all__ = ['inject_meta', 'show_meta', 'insert_warning', 'update_tags']

# %% ../nbs/07_processors.ipynb 3
from .read import *
from .imports import *
from .process import *

from fastcore.imports import *
from fastcore.xtras import *

# %% ../nbs/07_processors.ipynb 7
_re_meta= r'^\s*#(?:cell_meta|meta):\S+\s*[\n\r]'

def inject_meta(cell):
    "Inject metadata into a cell for further preprocessing with a comment."
    _pattern = r'(^\s*#(?:cell_meta|meta):)(\S+)(\s*[\n\r])'
    if cell.cell_type == 'code' and re.search(_re_meta, cell.source, flags=re.MULTILINE):
        cell_meta = re.findall(_pattern, cell.source, re.MULTILINE)
        d = cell.metadata.get('nbprocess', {})
        for _, m, _ in cell_meta:
            if '=' in m:
                k,v = m.split('=')
                d[k] = v
            else: print(f"Warning cell_meta:{m} does not have '=' will be ignored.")
        cell.metadata['nbprocess'] = d

# %% ../nbs/07_processors.ipynb 8
def show_meta(cell):
    "Show cell metadata"
    meta = cell.metadata.get('nbprocess')
    if meta: print(meta)

# %% ../nbs/07_processors.ipynb 14
def insert_warning(nb):
    "Insert Autogenerated Warning Into Notebook after the first cell."
    content = "<!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! -->"
    nb.cells.insert(1, AttrDict(cell_type='markdown', metadata={}, source=content))

# %% ../nbs/07_processors.ipynb 19
def update_tags(cell):
    root = cell.metadata.get('nbprocess', {})
    tags = root.get('tags', root.get('tag')) # allow the singular also
    if tags: cell.metadata['tags'] = cell.metadata.get('tags', []) + tags.split(',')
