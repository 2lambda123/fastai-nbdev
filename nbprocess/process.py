# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_process.ipynb.

# %% auto 0
__all__ = ['extract_comments', 'NBProcessor']

# %% ../nbs/02_process.ipynb 3
#export
from .read import *
from .maker import *
from .imports import *

from fastcore.script import *
from fastcore.imports import *
from fastcore.xtras import *

from collections import defaultdict
from pprint import pformat
from inspect import signature,Parameter
import ast,contextlib,copy

# %% ../nbs/02_process.ipynb 8
#export
def extract_comments(ss):
    "Take leading comments from lines of code in `ss`, remove `#`, and split"
    ss = ss.splitlines()
    first_code = first(i for i,o in enumerate(ss) if not o.strip() or re.match('\s*[^#\s]', o))
    return L((s.strip()[1:]).strip().split() for s in ss[:first_code]).filter()

# %% ../nbs/02_process.ipynb 11
#export
@functools.lru_cache(maxsize=None)
def _param_count(f):
    "Number of parameters accepted by function `f`"
    params = list(signature(f).parameters.values())
    # If there's a `*args` then `f` can take as many params as needed
    if first(params, lambda o: o.kind==Parameter.VAR_POSITIONAL): return 99
    return len([o for o in params if o.kind in (Parameter.POSITIONAL_ONLY,Parameter.POSITIONAL_OR_KEYWORD)])

# %% ../nbs/02_process.ipynb 12
#export
class NBProcessor:
    "Process cells and nbdev comments in a notebook"
    def __init__(self, path=None, procs=None, preprocs=None, postprocs=None, nb=None, debug=False):
        self.nb = read_nb(path) if nb is None else nb
        self.procs,self.preprocs,self.postprocs = map(L, (procs,preprocs,postprocs))
        self.debug = debug

    def _process_cell(self, cell):
        self.cell = cell
        cell._comments = extract_comments(cell.source)
        for proc in self.procs:
            if callable(proc): proc(cell)
            if cell.cell_type=='code': cell._comments.map(self._process_comment,proc)

    def _process_comment(self, proc, comment):
        cmd,*args = comment
        f = getattr(proc, f'_{cmd}_', None)
        if not f or _param_count(f)-1<len(args): return True
        if self.debug: print(cmd, args, f)
        return f(self, *args)
        
    def process(self):
        "Process all cells with `process_cell`"
        for proc in self.preprocs:
            nb = proc(self.nb)
            if nb: self.nb = nb
        for i in range_of(self.nb.cells): self._process_cell(self.nb.cells[i])
        self.nb.cells = [c for c in self.nb.cells if c.source is not None]
        for proc in self.postprocs:
            nb = proc(self.nb)
            if nb: self.nb = nb
