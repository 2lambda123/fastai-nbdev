# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_process.ipynb.

# %% auto 0
__all__ = ['extract_comments', 'opt_set', 'NBProcessor', 'inject_meta', 'show_meta', 'insert_warning', 'update_tags']

# %% ../nbs/02_process.ipynb 3
#|export
from .read import *
from .maker import *
from .imports import *

from fastcore.script import *
from fastcore.imports import *
from fastcore.xtras import *

from collections import defaultdict
from pprint import pformat
from inspect import signature,Parameter
import ast,contextlib,copy

# %% ../nbs/02_process.ipynb 8
#|export
def extract_comments(ss):
    "Take leading comments from lines of code in `ss`, remove `#|`, and split"
    ss = ss.splitlines()
    first_code = first(i for i,o in enumerate(ss) if not o.strip() or not re.match(r'\s*#\|', o))
    return L((s.strip()[2:]).strip().split() for s in ss[:first_code]).filter()

# %% ../nbs/02_process.ipynb 11
#|export
@functools.lru_cache(maxsize=None)
def _param_count(f):
    "Number of parameters accepted by function `f`"
    params = list(signature(f).parameters.values())
    # If there's a `*args` then `f` can take as many params as needed
    if first(params, lambda o: o.kind==Parameter.VAR_POSITIONAL): return 99
    return len([o for o in params if o.kind in (Parameter.POSITIONAL_ONLY,Parameter.POSITIONAL_OR_KEYWORD)])

# %% ../nbs/02_process.ipynb 12
#|export
def opt_set(var, newval):
    "newval if newval else var"
    return newval if newval else var

# %% ../nbs/02_process.ipynb 13
#|export
class NBProcessor:
    "Process cells and nbdev comments in a notebook"
    def __init__(self, path=None, procs=None, preprocs=None, postprocs=None, nb=None, debug=False):
        self.nb = read_nb(path) if nb is None else nb
        self.procs,self.preprocs,self.postprocs = map(L, (procs,preprocs,postprocs))
        self.debug = debug

    def _process_cell(self, cell):
        self.cell = cell
        if not hasattr(cell, '_comments'): cell._comments = extract_comments(cell.source)
        for proc in self.procs:
            if cell.cell_type=='code': cell._comments.map(self._process_comment,proc)
            if callable(proc): cell = opt_set(cell, proc(cell))

    def _process_comment(self, proc, comment):
        cmd,*args = comment
        f = getattr(proc, f'_{cmd}_', None)
        if not f or _param_count(f)-1<len(args): return True
        if self.debug: print(cmd, args, f)
        return f(self, *args)
        
    def process(self):
        "Process all cells with `process_cell`"
        for proc in self.preprocs: self.nb = opt_set(self.nb, proc(self.nb))
        for i in range_of(self.nb.cells): self._process_cell(self.nb.cells[i])
        self.nb.cells = [c for c in self.nb.cells if c and getattr(c,'source',None) is not None]
        for proc in self.postprocs: self.nb = opt_set(self.nb, proc(self.nb))

# %% ../nbs/02_process.ipynb 18
#|export
_re_meta= r'^\s*#(?:cell_meta|meta):\S+\s*[\n\r]'

def inject_meta(cell):
    "Inject metadata into a cell for further preprocessing with a comment."
    _pattern = r'(^\s*#(?:cell_meta|meta):)(\S+)(\s*[\n\r])'
    if cell.cell_type == 'code' and re.search(_re_meta, cell.source, flags=re.MULTILINE):
        cell_meta = re.findall(_pattern, cell.source, re.MULTILINE)
        d = cell.metadata.get('nbprocess', {})
        for _, m, _ in cell_meta:
            if '=' in m:
                k,v = m.split('=')
                d[k] = v
            else: print(f"Warning cell_meta:{m} does not have '=' will be ignored.")
        cell.metadata['nbprocess'] = d

# %% ../nbs/02_process.ipynb 19
#|export
def show_meta(cell):
    "Show cell metadata"
    meta = cell.metadata.get('nbprocess')
    if meta: print(meta)

# %% ../nbs/02_process.ipynb 25
#| export
def insert_warning(nb):
    "Insert Autogenerated Warning Into Notebook after the first cell."
    content = "<!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! -->"
    nb.cells.insert(1, AttrDict(cell_type='markdown', metadata={}, source=content))

# %% ../nbs/02_process.ipynb 30
#|export
def update_tags(cell):
    root = cell.metadata.get('nbprocess', {})
    tags = root.get('tags', root.get('tag')) # allow the singular also
    if tags: cell.metadata['tags'] = cell.metadata.get('tags', []) + tags.split(',')
