# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/15_migrate.ipynb.

# %% auto 0
__all__ = ['cat_slug', 'file_slug', 'migrate_nb_fm', 'md_fmdict', 'migrate_md_fm', 'nbprocess_migrate_directives']

# %% ../nbs/15_migrate.ipynb 3
from .processors import nb_fmdict, construct_fm, insert_frontmatter, is_frontmatter
from .read import read_nb, config_key
from .sync import write_nb
from .clean import _process_write, repl_v1dir, _wrapio
from fastcore.all import *
from json import loads

# %% ../nbs/15_migrate.ipynb 5
def _get_fm(path): return nb_fmdict(read_nb(path), remove=False)
def _get_raw_fm(nb): 
    return first(nb.cells.filter(lambda x: x.cell_type == 'raw')).source

# %% ../nbs/15_migrate.ipynb 6
def cat_slug(fmdict):
    "Get the partial slug from the category front matter."
    cats = [c for c in fmdict.get('categories', '').strip().strip('][').split(', ') if c]
    return '/' + '/'.join(sorted(cats)) if cats else ''

# %% ../nbs/15_migrate.ipynb 9
def file_slug(fname): 
    "Get the partial slug from the filename."
    p = Path(fname)
    dt = '/'+p.name[:10].replace('-', '/')+'/'
    return dt + p.stem[11:]    

# %% ../nbs/15_migrate.ipynb 11
def _add_alias(fm:dict, path:Path):
    if 'permalink' in fm: fm['aliases'] = '[' + fm.pop('permalink').strip() + ']'
    else: fm['aliases'] = '[' + cat_slug(fm) + file_slug(path) + ']'

# %% ../nbs/15_migrate.ipynb 13
def migrate_nb_fm(path, overwrite=True):
    "Migrate fastpages front matter in notebooks to a raw cell."
    nb = read_nb(path)
    if is_frontmatter(nb): return None
    fm = nb_fmdict(nb)
    _add_alias(fm, path)
    insert_frontmatter(nb, fm_dict=fm)
    if overwrite: write_nb(nb, path)
    return nb

# %% ../nbs/15_migrate.ipynb 17
_re_fm_md = re.compile(r'^---(.*\S+.)?---', flags=re.DOTALL)

def md_fmdict(txt):
    "Get front matter as a dict from a markdown file."
    m = _re_fm_md.match(txt)
    if m:
        fm = [s.split(':', 1) for s in m.group(1).splitlines() if s]
        return {k:v.strip() for k,v in fm if k and v}
    else: return {}

# %% ../nbs/15_migrate.ipynb 20
def migrate_md_fm(path, overwrite=True):
    "Make fastpages front matter in markdown files quarto compliant."
    p = Path(path)
    md = p.read_text()
    fm = md_fmdict(md)
    if fm:
        _add_alias(fm, path)
        txt = _re_fm_md.sub(construct_fm(fm), md)
        if overwrite: p.write_text(txt)
        return txt
    else: return md 

# %% ../nbs/15_migrate.ipynb 27
@call_parse
def nbprocess_migrate_directives(
    fname:str=None, # A notebook name or glob to convert
    disp:bool=False,  # Print the outputs with newly formatted directives
    stdin:bool=False, # Read input stream and not nb folder
    no_skip:bool=False, # Do not skip directories beginning with an underscore
):
    "Convert all directives in `fname` from v1 to v2."
    _write = partial(_process_write, warn_msg='Failed to replace directives', proc_nb=repl_v1dir)
    if stdin: _write(f_in=_wrapio(sys.stdin), f_out=_wrapio(sys.stdout))
    _skip_re = None if no_skip else '^[_.]'
    if fname is None: fname = config_key("nbs_path", '.', missing_ok=True)
    for f in globtastic(fname, file_glob='*.ipynb', skip_folder_re=_skip_re): _write(f_in=f, disp=disp)
    
