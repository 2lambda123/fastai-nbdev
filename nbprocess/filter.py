# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/08_filter.ipynb.

# %% ../nbs/08_filter.ipynb 1
from __future__ import annotations
import json

from .read import *
from .sync import *
from .process import *
from .processors import *
from fastcore.imports import *
from fastcore.all import Path,parallel,call_parse,bool_arg,globtastic

# %% auto 0
__all__ = ['FilterDefaults', 'filter_nb']

# %% ../nbs/08_filter.ipynb 4
class FilterDefaults:
    def _nothing(self): return []
    xtra_procs=xtra_preprocs=xtra_postprocs=_nothing
    
    def base_procs(self):
        return [strip_ansi, meta_, hide_line, filter_stream_, clean_magics,
                bash_identify, rm_header_dash, rm_export, clean_show_doc, remove_]
    def base_preprocs(self): return [insert_warning]
    def base_postprocs(self): return []

    def procs(self):
        "Processors for export"
        return self.base_procs + self.xtra_procs

    def preprocs(self):
        "Preprocessors for export"
        return self.base_preprocs + self.xtra_preprocs

    def postprocs(self):
        "Postprocessors for export"
        return self.base_postprocs + self.xtra_postprocs

# %% ../nbs/08_filter.ipynb 5
@call_parse
def filter_nb(
    nb_txt:str=None  # Notebook text (uses stdin if not provided)
):
    filt = get_config().get('exporter', FilterDefaults)()
    printit = False
    if not nb_txt:
        nb_txt = sys.stdin.read()
        printit = True
    nb = dict2nb(json.loads(nb_txt))
    nbp = NBProcessor(nb=nb, procs=exp.procs(), preprocs=exp.preprocs(), postprocs=exp.postprocs())
    nbp.process()
    res = nb2str(nb)
    if printit: print(res)
    else: return res
