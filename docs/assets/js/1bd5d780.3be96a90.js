"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[718],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),l=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=l(n),m=a,f=u["".concat(i,".").concat(m)]||u[m]||d[m]||o;return n?r.createElement(f,s(s({ref:t},p),{},{components:n})):r.createElement(f,s({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=u;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:a,s[1]=c;for(var l=2;l<o;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3483:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return i},default:function(){return m},frontMatter:function(){return c},metadata:function(){return l},toc:function(){return d}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),s=["components"],c={},i=void 0,l={unversionedId:"06a_media",id:"06a_media",title:"06a_media",description:"Make allowances for plots and dataframes in MDX",source:"@site/docs/06a_media.md",sourceDirName:".",slug:"/06a_media",permalink:"/06a_media",editUrl:"https://github.com/fastai/nbprocess/tree/main/packages/create-docusaurus/templates/shared/docs/06a_media.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"convert",permalink:"/convert"},next:{title:"06b_mdx",permalink:"/06b_mdx"}},p={},d=[],u={toc:d};function m(e){var t=e.components,n=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"#default_exp media\n")),(0,o.kt)("h1",{id:"convert-html-and-images-to-mdx"},"Convert HTML and Images to MDX"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Make allowances for plots and dataframes in MDX")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"#export\nfrom nbprocess.processor import *\nfrom fastcore.imports import Path\nfrom fastcore.basics import nested_idx\nfrom html.parser import HTMLParser\n\nfrom nbprocess.test_utils import *\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"#export\nclass _HTMLdf(HTMLParser):\n    \"HTML Parser that finds a dataframe.\"\n    df,scoped = False,False\n    def handle_starttag(self, tag, attrs):\n        if tag == 'style' and 'scoped' in dict(attrs): self.scoped=True\n    def handle_data(self, data):\n        if '.dataframe' in data and self.scoped: self.df=True\n    def handle_endtag(self, tag):\n        if tag == 'style': self.scoped=False\n                \n    @classmethod\n    def search(cls, x):\n        parser = cls()\n        parser.feed(x)\n        return parser.df\n\n@preprocess_cell\ndef HTMLEscape(cell):\n    \"Place HTML in a codeblock and surround it with a <HTMLOutputBlock> component.\"\n    if cell.cell_type !='code': return\n    for o in cell.outputs:\n        if nested_idx(o, 'data', 'text/html'):\n            cell.metadata.html_output = True\n            html = o['data']['text/html']\n            cell.metadata.html_center = not _HTMLdf.search(html)\n            o['data']['text/html'] = '```html\\n'+html.strip()+'\\n```'\n")),(0,o.kt)("p",null,"By default, HTML is incompatible with MDX.  We place HTML in a code block and wrap it with the a custom component so that the static site generator can render it."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"c, _ = run_preprocessor([HTMLEscape], '../tests/docs_test.ipynb')\nassert '<HTMLOutputBlock' in c and '</HTMLOutputBlock>' in c and 'center' not in c\nassert '```html\\n<div>' in c and '</div>\\n```' in c\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"#export\nclass ImageSave(Preprocessor):\n    \"Saves images stored as bytes in notebooks to disk.\"\n    def preprocess(self, nb, resources):\n        meta = resources.get('metadata', {})\n        nb_name,nb_path = meta.get('name'),meta.get('path')\n        outfiles = resources.get('outputs')\n        if nb_name and outfiles:\n            resources['fmap'] = {}\n            for k,v in outfiles.items():\n                dest = Path(nb_path)/f'_{nb_name}_files/{k}'\n                dest.parent.mkdir(exist_ok=True)\n                dest.write_bytes(v)\n                resources['fmap'][f'{k}'] = f'_{nb_name}_files/{k}'       \n        return nb, resources\n\nclass ImagePath(Preprocessor):\n    \"Changes the image path to the location where `ImageSave` saved the files.\"\n    def preprocess_cell(self, cell, resources, index): \n        fmap = resources.get('fmap')\n        if fmap:\n            for o in cell.get('outputs', []):\n                fnames = o.get('metadata', {}).get('filenames', {})\n                for k,v in fnames.items():\n                    fnames[k] = fmap.get(v,v)\n        return cell, resources\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"ImageSave")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"ImagePath")," must be used together to extract and save images from notebooks and change the path.  This is necessary to enable compatiblity with certain types of plotting libraries like matplotlib."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"c, _ = run_preprocessor([ImageSave, ImagePath], '../tests/docs_test.ipynb')\nassert '![png](_docs_test_files/output_6_0.png)' in c\n")))}m.isMDXComponent=!0}}]);