"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[730],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=o.createContext({}),p=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=p(e.components);return o.createElement(c.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},f=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),f=p(t),m=r,d=f["".concat(c,".").concat(m)]||f[m]||s[m]||a;return t?o.createElement(d,l(l({ref:n},u),{},{components:t})):o.createElement(d,l({ref:n},u))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,l=new Array(a);l[0]=f;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var p=2;p<a;p++)l[p]=t[p];return o.createElement.apply(null,l)}return o.createElement.apply(null,t)}f.displayName="MDXCreateElement"},4599:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return i},metadata:function(){return p},toc:function(){return s}});var o=t(7462),r=t(3366),a=(t(7294),t(3905)),l=["components"],i={},c=void 0,p={unversionedId:"clean",id:"clean",title:"clean",description:"Strip notebooks from superfluous metadata",source:"@site/docs/05_clean.md",sourceDirName:".",slug:"/clean",permalink:"/clean",editUrl:"https://github.com/fastai/nbprocess/tree/main/packages/create-docusaurus/templates/shared/docs/05_clean.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"merge",permalink:"/merge"},next:{title:"convert",permalink:"/convert"}},u={},s=[{value:"Utils",id:"utils",level:2},{value:"Main function",id:"main-function",level:2},{value:"Export -",id:"export--",level:2}],f={toc:s};function m(e){var n=e.components,t=(0,r.Z)(e,l);return(0,a.kt)("wrapper",(0,o.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"#default_exp clean\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"#export\nfrom fastcore.script import *\nfrom fastcore.utils import *\nfrom fastcore.imports import *\n\nfrom nbprocess.imports import *\nfrom nbprocess.read import *\nfrom nbprocess.sync import *\n\n# from pathlib import Path\n# import io,sys,json,glob,re\n")),(0,a.kt)("h1",{id:"clean-notebooks"},"Clean notebooks"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Strip notebooks from superfluous metadata")),(0,a.kt)("p",null,"To avoid pointless conflicts while working with jupyter notebooks (with different execution counts or cell metadata), it is recommended to clean the notebooks before committing anything (done automatically if you install the git hooks with ",(0,a.kt)("inlineCode",{parentName:"p"},"nbdev_install_git_hooks"),"). The following functions are used to do that."),(0,a.kt)("h2",{id:"utils"},"Utils"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"#export\ndef _clean_cell_output(cell):\n    \"Remove execution count in `cell`\"\n    if 'outputs' in cell:\n        for o in cell['outputs']:\n            if 'execution_count' in o: o['execution_count'] = None\n            o.get('data',{}).pop(\"application/vnd.google.colaboratory.intrinsic+json\", None)\n            o.get('metadata', {}).pop('tags', None)\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"#export\ndef _clean_cell(cell, clear_all=False):\n    \"Clean `cell` by removing superfluous metadata or everything except the input if `clear_all`\"\n    if 'execution_count' in cell: cell['execution_count'] = None\n    if 'outputs' in cell:\n        if clear_all: cell['outputs'] = []\n        else:         _clean_cell_output(cell)\n    if cell['source'] == ['']: cell['source'] = []\n    cell['metadata'] = {} if clear_all else {\n        k:v for k,v in cell['metadata'].items() if k==\"hide_input\"}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'#export\ndef clean_nb(nb, clear_all=False):\n    "Clean `nb` from superfluous metadata"\n    for c in nb[\'cells\']: _clean_cell(c, clear_all=clear_all)\n    nb[\'metadata\'] = {k:v for k,v in nb[\'metadata\'].items() if k in\n                     ("kernelspec", "jekyll", "jupytext", "doc")}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"tst = {'cell_type': 'code', 'execution_count': 26,\n       'metadata': {'hide_input': True, 'meta': 23},\n       'outputs': [{'execution_count': 2,\n                    'data': {\n                        'application/vnd.google.colaboratory.intrinsic+json': {'type': 'string'},\n                        'plain/text': ['sample output',]\n                    }, 'output': 'super'}],\n       'source': 'awesome_code'}\nnb = {'metadata': {'kernelspec': 'some_spec', 'jekyll': 'some_meta', 'meta': 37}, 'cells': [tst]}\n\nclean_nb(nb)\ntest_eq(nb['cells'][0], {'cell_type': 'code', 'execution_count': None,\n              'metadata': {'hide_input': True},\n              'outputs': [{'execution_count': None, \n                           'data': { 'plain/text': ['sample output',]},\n                           'output': 'super'}],\n              'source': 'awesome_code'})\ntest_eq(nb['metadata'], {'kernelspec': 'some_spec', 'jekyll': 'some_meta'})\n")),(0,a.kt)("h2",{id:"main-function"},"Main function"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"#export\ndef _wrapio(strm): return io.TextIOWrapper(strm, encoding='utf-8', line_buffering=True)\n\ndef _clean_write(nb, f_in, f_out=None, clear_all=False):\n    if not f_out: f_out = f_in\n    nb = json.load(f_in)\n    clean_nb(nb, clear_all=clear_all)\n    write_nb(nb, f_out)\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"#export\n@call_parse\ndef nbdev_clean_nbs(\n    fname:str=None, # A notebook name or glob to convert\n    clear_all:bool_arg=False, # Clean all metadata and outputs\n    read_stdin:bool_arg=False # Read input stream and not nb folder\n):\n    \"Clean all notebooks in `fname` to avoid merge conflicts\"\n    # Git hooks will pass the notebooks in stdin\n    if read_stdin: return _clean_write(nb, _wrapio(sys.stdin), _wrapio(sys.stdout), clear_all=clear_all)\n\n    if fname is None: fname = get_config().path(\"nbs_path\")\n    for f in globtastic(fname, file_glob='*.ipynb', skip_folder_re='^[_.]'):\n        _clean_write(nb, f, clear_all=clear_all)\n")),(0,a.kt)("p",null,"By default (",(0,a.kt)("inlineCode",{parentName:"p"},"fname")," left to ",(0,a.kt)("inlineCode",{parentName:"p"},"None"),"), the all the notebooks in ",(0,a.kt)("inlineCode",{parentName:"p"},"lib_folder")," are cleaned. You can opt in to fully clean the notebook by removing every bit of metadata and the cell outputs by passing ",(0,a.kt)("inlineCode",{parentName:"p"},"clear_all=True"),"."),(0,a.kt)("h2",{id:"export--"},"Export -"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"#hide\nfrom nbprocess.export import nbs_export\nnbs_export()\n")))}m.isMDXComponent=!0}}]);