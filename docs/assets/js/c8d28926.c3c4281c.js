"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[420],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return d}});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=o.createContext({}),s=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},p=function(e){var n=s(e.components);return o.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},b=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),b=s(t),d=r,m=b["".concat(l,".").concat(d)]||b[d]||u[d]||a;return t?o.createElement(m,c(c({ref:n},p),{},{components:t})):o.createElement(m,c({ref:n},p))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,c=new Array(a);c[0]=b;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,c[1]=i;for(var s=2;s<a;s++)c[s]=t[s];return o.createElement.apply(null,c)}return o.createElement.apply(null,t)}b.displayName="MDXCreateElement"},6386:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return s},default:function(){return f},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return b}});var o,r=t(7462),a=t(3366),c=(t(7294),t(3905)),i=["components"],l={},s=void 0,p={unversionedId:"merge",id:"merge",title:"merge",description:"Fix merge conflicts in jupyter notebooks",source:"@site/docs/04_merge.md",sourceDirName:".",slug:"/merge",permalink:"/merge",editUrl:"https://github.com/fastai/nbprocess/tree/main/packages/create-docusaurus/templates/shared/docs/04_merge.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"sync",permalink:"/sync"},next:{title:"clean",permalink:"/clean"}},u={},b=[{value:"Introduction",id:"introduction",level:2},{value:"Creating a merged notebook",id:"creating-a-merged-notebook",level:2},{value:"Export-",id:"export-",level:2}],d=(o="CodeOutputBlock",function(e){return console.warn("Component "+o+" was not imported, exported, or provided by MDXProvider as global scope"),(0,c.kt)("div",e)}),m={toc:b};function f(e){var n=e.components,t=(0,a.Z)(e,i);return(0,c.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"#default_exp merge\n")),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"#export\nfrom nbprocess.imports import *\nfrom nbprocess.read import *\nfrom nbprocess.export import *\nfrom nbprocess.sync import *\nfrom fastcore.script import *\n\nfrom difflib import SequenceMatcher\nimport json\n")),(0,c.kt)("h1",{id:"fix-merge-conflicts"},"Fix merge conflicts"),(0,c.kt)("blockquote",null,(0,c.kt)("p",{parentName:"blockquote"},"Fix merge conflicts in jupyter notebooks")),(0,c.kt)("h2",{id:"introduction"},"Introduction"),(0,c.kt)("p",null,"When working with jupyter notebooks (which are json files behind the scenes) and GitHub, it is very common that a merge conflict (that will add new lines in the notebook source file) will break some notebooks you are working on. This module defines the function ",(0,c.kt)("inlineCode",{parentName:"p"},"fix_conflicts")," to fix those notebooks for you, and attempt to automatically merge standard conflicts. The remaining ones will be delimited by markdown cells like this:"),(0,c.kt)("p",null,(0,c.kt)("inlineCode",{parentName:"p"},"<<<<<< HEAD")),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"# local code here\n")),(0,c.kt)("p",null,(0,c.kt)("inlineCode",{parentName:"p"},"======")),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"# remote code here\n")),(0,c.kt)("p",null,(0,c.kt)("inlineCode",{parentName:"p"},">>>>>> a7ec1b0bfb8e23b05fd0a2e6cafcb41cd0fb1c35")),(0,c.kt)("p",null,"Below is an example of broken notebook. The json format is broken by the lines automatically added by git. Such a file can't be opened in jupyter notebook."),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"broken = Path('../tests/example.ipynb.broken')\ntst_nb = broken.read_text()\nprint(tst_nb)\n")),(0,c.kt)(d,{lang:"",mdxType:"CodeOutputBlock"},(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},'{\n "cells": [\n  {\n   "cell_type": "code",\n<<<<<<< HEAD\n   "execution_count": 6,\n   "metadata": {},\n   "outputs": [\n    {\n     "data": {\n      "text/plain": [\n       "3"\n      ]\n     },\n     "execution_count": 6,\n     "metadata": {},\n     "output_type": "execute_result"\n    }\n   ],\n   "source": [\n    "z=3\\n",\n    "z"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 7,\n=======\n   "execution_count": 5,\n>>>>>>> a7ec1b0bfb8e23b05fd0a2e6cafcb41cd0fb1c35\n   "metadata": {},\n   "outputs": [\n    {\n     "data": {\n      "text/plain": [\n       "6"\n      ]\n     },\n<<<<<<< HEAD\n     "execution_count": 7,\n=======\n     "execution_count": 5,\n>>>>>>> a7ec1b0bfb8e23b05fd0a2e6cafcb41cd0fb1c35\n     "metadata": {},\n     "output_type": "execute_result"\n    }\n   ],\n   "source": [\n    "x=3\\n",\n    "y=3\\n",\n    "x+y"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": null,\n   "metadata": {},\n   "outputs": [],\n   "source": []\n  }\n ],\n "metadata": {\n  "kernelspec": {\n   "display_name": "Python 3",\n   "language": "python",\n   "name": "python3"\n  }\n },\n "nbformat": 4,\n "nbformat_minor": 2\n}\n'))),(0,c.kt)("p",null,"Note that in this example, the second conflict is easily solved: it just concerns the execution count of the second cell and can be solved by choosing either option without really impacting your notebook. This is the kind of conflict we will fix automatically. The first conflict is more complicated as it spans across two cells and there is a cell present in one version, not the other. Such a conflict (and generally the ones where the inputs of the cells change form one version to the other) aren't automatically fixed, but we will return a proper json file where the annotations introduced by git will be placed in markdown cells."),(0,c.kt)("h2",{id:"creating-a-merged-notebook"},"Creating a merged notebook"),(0,c.kt)("p",null,'The approach we use is to first "unpatch" the conflicted file, regenerating the two files it was originally created from. Then we redo the diff process, but using cells instead of text lines.'),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"#export\n_BEG,_MID,_END = '<'*7,'='*7,'>'*7\nconf_re = re.compile(rf'^{_BEG}\\s+(\\S+)\\n(.*?)\\n{_MID}\\n(.*?)^{_END}\\s+(\\S+)\\n', re.MULTILINE|re.DOTALL)\n\ndef _unpatch_f(before, cb1, cb2, c, r):\n    if cb1 is not None and cb1 != cb2: raise Exception(f'Branch mismatch: {cb1}/{cb2}')\n    r.append(before)\n    r.append(c)\n    return cb2\n")),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"#export\ndef unpatch(s:str):\n    \"Takes a string with conflict markers and returns the two original files, and their branch names\"\n    *main,last = conf_re.split(s)\n    r1,r2,c1b,c2b = [],[],None,None\n    for before,c1_branch,c1,c2,c2_branch in chunked(main, 5):\n        c1b = _unpatch_f(before, c1b, c1_branch, c1, r1)\n        c2b = _unpatch_f(before, c2b, c2_branch, c2, r2)\n    return ''.join(r1+[last]), ''.join(r2+[last]), c1b, c2b\n")),(0,c.kt)("p",null,'The result of "unpatching" our conflicted test notebook is the two original notebooks it would have been created from. Each of these original notebooks will contain valid JSON:'),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"a,b,branch1,branch2 = unpatch(tst_nb)\njson.loads(b)\n")),(0,c.kt)(d,{lang:"",mdxType:"CodeOutputBlock"},(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"{'cells': [{'cell_type': 'code',\n   'execution_count': 5,\n   'metadata': {},\n   'outputs': [{'data': {'text/plain': ['6']},\n     'execution_count': 5,\n     'metadata': {},\n     'output_type': 'execute_result'}],\n   'source': ['x=3\\n', 'y=3\\n', 'x+y']},\n  {'cell_type': 'code',\n   'execution_count': None,\n   'metadata': {},\n   'outputs': [],\n   'source': []}],\n 'metadata': {'kernelspec': {'display_name': 'Python 3',\n   'language': 'python',\n   'name': 'python3'}},\n 'nbformat': 4,\n 'nbformat_minor': 2}\n"))),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"branch1,branch2\n")),(0,c.kt)(d,{lang:"",mdxType:"CodeOutputBlock"},(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"('HEAD', 'a7ec1b0bfb8e23b05fd0a2e6cafcb41cd0fb1c35')\n"))),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"#export\ndef _make_md(code): return [dict(source=f'`{code}`', cell_type=\"markdown\", metadata={})]\ndef _make_conflict(a,b, branch1, branch2):\n    return _make_md(f'{_BEG} {branch1}') + a + \\\n        _make_md(_MID) + b + _make_md(f'{_END} {branch2}')\n\ndef _merge_cells(a, b, brancha, branchb, theirs):\n    matches = SequenceMatcher(None, a, b).get_matching_blocks()\n    res,prev_sa,prev_sb,conflict = [],0,0,False\n    for sa,sb,sz in matches:\n        ca,cb = a[prev_sa:sa],b[prev_sb:sb]\n        if ca or cb:\n            res += _make_conflict(ca, cb, brancha, branchb)\n            conflict = True\n        if sz: res += b[sb:sb+sz] if theirs else a[sa:sa+sz]\n        prev_sa,prev_sb = sa+sz,sb+sz\n    return res,conflict\n")),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},'#export\n@call_parse\ndef fix_merge(nbname:str, # notebook filename to fix\n              outname:str=None, # filename of output notebook, defaults to `nbname`\n              nobackup:bool=True, # do not backup `nbname` to `nbname.bak` if `outname` not provided\n              theirs:bool=False, # use their outputs/metadata instead of ours\n              noprint:bool=False): # Do not print info about whether conflict found\n    "Create working notebook from conflicted notebook `nbname`"\n    nbname = Path(nbname)\n    if not nobackup and not outname: shutil.copy(fname, fname.with_suffix(\'.ipynb.bak\'))\n    nbtxt = nbname.read_text()\n    a,b,branch1,branch2 = unpatch(nbtxt)\n    ac,bc = dict2nb(json.loads(a)),dict2nb(json.loads(b))\n    dest = bc if theirs else ac\n    cells,conflict = _merge_cells(ac.cells, bc.cells, branch1, branch2, theirs=theirs)\n    dest.cells = cells\n    write_nb(dest, ifnone(outname, nbname))\n    if not noprint:\n        if conflict: print("One or more conflict remains in the notebook, please inspect manually.")\n        else: print("Successfully merged conflicts!")\n    return conflict\n')),(0,c.kt)("p",null,"This begins by optionally backing the notebook ",(0,c.kt)("inlineCode",{parentName:"p"},"fname")," to ",(0,c.kt)("inlineCode",{parentName:"p"},"fname.bak")," in case something goes wrong. Then it parses the broken json, solving conflicts in cells. Every conflict that only involves metadata or outputs of cells will be solved automatically by using the local (",(0,c.kt)("inlineCode",{parentName:"p"},"theirs==False"),") or the remote (",(0,c.kt)("inlineCode",{parentName:"p"},"theirs==True"),") branch. Otherwise, or for conflicts involving the inputs of cells, the json will be repaired by including the two version of the conflicted cell(s) with markdown cells indicating the conflicts. You will be able to open the notebook again and search for the conflicts (look for ",(0,c.kt)("inlineCode",{parentName:"p"},"<<<<<<<"),") then fix them as you wish."),(0,c.kt)("p",null,"A message will be printed indicating whether the notebook was fully merged or if conflicts remain."),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"fix_merge(broken, outname='tmp.ipynb')\nchk = read_nb('tmp.ipynb')\ntest_eq(len(chk.cells), 6)\n")),(0,c.kt)(d,{lang:"",mdxType:"CodeOutputBlock"},(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"One or more conflict remains in the notebook, please inspect manually.\n"))),(0,c.kt)("h2",{id:"export-"},"Export-"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"#hide\nfrom nbprocess.export import nbs_export\nnbs_export()\n")))}f.isMDXComponent=!0}}]);