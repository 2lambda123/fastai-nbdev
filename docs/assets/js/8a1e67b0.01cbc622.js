"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[233],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return m}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},f={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(t),m=o,d=u["".concat(l,".").concat(m)]||u[m]||f[m]||a;return t?r.createElement(d,s(s({ref:n},c),{},{components:t})):r.createElement(d,s({ref:n},c))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,s=new Array(a);s[0]=u;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var p=2;p<a;p++)s[p]=t[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},2331:function(e,n,t){t.r(n),t.d(n,{assets:function(){return f},contentTitle:function(){return p},default:function(){return k},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return u}});var r,o=t(7462),a=t(3366),s=(t(7294),t(3905)),i=["components"],l={},p=void 0,c={unversionedId:"convert",id:"convert",title:"convert",description:"Utilities that help you go from .ipynb -> .md",source:"@site/docs/07_convert.md",sourceDirName:".",slug:"/convert",permalink:"/convert",editUrl:"https://github.com/fastai/nbprocess/tree/main/packages/create-docusaurus/templates/shared/docs/07_convert.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"clean",permalink:"/clean"},next:{title:"06a_media",permalink:"/06a_media"}},f={},u=[],m=(r="CodeOutputBlock",function(e){return console.warn("Component "+r+" was not imported, exported, or provided by MDXProvider as global scope"),(0,s.kt)("div",e)}),d={toc:u};function k(e){var n=e.components,t=(0,a.Z)(e,i);return(0,s.kt)("wrapper",(0,o.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"#default_exp convert\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"#export\nfrom __future__ import annotations\nfrom nbprocess.mdx import *\nimport os,sys\n\nfrom nbconvert.exporters import Exporter\nfrom fastcore.all import Path,parallel,call_parse,bool_arg,globtastic\n")),(0,s.kt)("h1",{id:"convert-notebooks-to-markdown"},"Convert Notebooks To Markdown"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"Utilities that help you go from .ipynb -> .md")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"#export\ndef nb2md(fname:str|Path, exp:Exporter):\n    \"Convert a notebook in `fname` to a markdown file.\"\n    file = Path(fname)\n    assert file.name.endswith('.ipynb'), f'{str(fname)} is not a notebook.'\n    assert file.is_file(), f'file {str(fname)} not found.'\n    print(f\"converting: {str(file)}\")\n    try:\n        o,r = exp.from_filename(fname)\n        file.with_suffix('.md').write_text(o)\n        return True\n    except Exception as e:\n        print(e)\n        return False\n")),(0,s.kt)("p",null,"We can use ",(0,s.kt)("inlineCode",{parentName:"p"},"nb2md")," to convert a notebook to a markdown file with an ",(0,s.kt)("inlineCode",{parentName:"p"},"Exporter"),".  Below, we use the exporter given to us by ",(0,s.kt)("inlineCode",{parentName:"p"},"nbdoc.mdx.get_mdx_exporter")," and use that to create a markdown file from a notebook."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"_test_fname = Path('../tests/docs_test.ipynb')\n_test_dest = Path('../tests/docs_test.md')\n_test_dest.unlink(missing_ok=True)\n\nnb2md(fname=_test_fname, exp = get_mdx_exporter()) # create the markdown file\nassert _test_dest.exists() # make sure the markdown file does exist\nassert len(_test_dest.readlines()) > 10\n")),(0,s.kt)(m,{lang:"python",mdxType:"CodeOutputBlock"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"converting: ../tests/docs_test.ipynb\n"))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"#export\n@call_parse\ndef parallel_nb2md(\n    path:str='.', # path or filename\n    recursive:bool=True, # search subfolders\n    symlinks:bool=True, # follow symlinks?\n    n_workers:int=None, # Number of parallel workers\n    pause:int=0, # Pause between parallel launches\n    force_all:bool=False, # Force rebuild docs that are up-to-date\n    file_glob:str='*.ipynb', # Only include files matching glob\n    file_re:str=None, # Only include files matching regex\n    folder_re:str=None, # Only enter folders matching regex\n    skip_file_glob:str=None, # Skip files matching glob\n    skip_file_re:str=None, # Skip files matching regex\n    skip_folder_re:str='^[_.]' # Skip folders matching regex\n):\n    if os.environ.get('IN_TEST',0): return\n    exp=get_mdx_exporter()\n    if not recursive: skip_folder_re='.'\n    files = globtastic(path, symlinks=symlinks, file_glob=file_glob, file_re=file_re,\n                       folder_re=folder_re, skip_file_glob=skip_file_glob,\n                       skip_file_re=skip_file_re, skip_folder_re=skip_folder_re\n                      ).map(Path)\n\n    if len(files)==1: force_all,n_workers = True,0\n    if not force_all:\n        # only rebuild modified files\n        files,_files = [],files.copy()\n        for fname in _files:\n            fname_out = fname.with_suffix('.md')\n            if not fname_out.exists() or os.path.getmtime(fname) >= os.path.getmtime(fname_out):\n                files.append(fname)\n    if len(files)==0: print(\"No notebooks were modified.\")\n    else:\n        if sys.platform == \"win32\": n_workers = 0\n        passed = parallel(nb2md, files, n_workers=n_workers, exp=exp, pause=pause)\n        if not all(passed):\n            msg = \"Conversion failed on the following:\\n\"\n            print(msg + '\\n'.join([f.name for p,f in zip(passed,files) if not p]))\n")),(0,s.kt)("p",null,"You can use ",(0,s.kt)("inlineCode",{parentName:"p"},"parallel_nb2md")," to recursively convert a directory of notebooks to markdown files."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"parallel_nb2md('../tests', recursive=False, n_workers=0)\n\nfor f in globtastic('../tests', file_glob='*.ipynb', skip_folder_re='^[_.]').map(Path):\n    assert f.with_suffix('.md').exists(), f'{str(f)} does not exist.'\n")),(0,s.kt)(m,{lang:"python",mdxType:"CodeOutputBlock"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"converting: ../tests/00_some.thing.ipynb\nconverting: ../tests/minimal.ipynb\nconverting: ../tests/01_everything.ipynb\n"))),(0,s.kt)("p",null,"The modified times of notebooks are introspected such notebooks that haven't changed after markdown files have been created will not be converted:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"parallel_nb2md('../tests', recursive=False, n_workers=0)\n")),(0,s.kt)(m,{lang:"python",mdxType:"CodeOutputBlock"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"No notebooks were modified.\n"))),(0,s.kt)("p",null,"However, you can set ",(0,s.kt)("inlineCode",{parentName:"p"},"force_all")," = ",(0,s.kt)("inlineCode",{parentName:"p"},"True")," to force notebooks to convert:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"parallel_nb2md('../tests', recursive=False, n_workers=0, force_all=True)\n")),(0,s.kt)(m,{lang:"python",mdxType:"CodeOutputBlock"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"converting: ../tests/00_some.thing.ipynb\nconverting: ../tests/docs_test.ipynb\nconverting: ../tests/minimal.ipynb\nconverting: ../tests/01_everything.ipynb\n"))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"#hide\nfor f in _test_nbs: f.with_suffix('.md').unlink(missing_ok=True)\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'#export\n@call_parse\ndef nbdoc_build(\n    srcdir:str=None,  # A directory of notebooks to convert to docs recursively, can also be a filename.\n    force_all:bool_arg=False, # Rebuild even notebooks that havent changed\n    n_workers:int=None,  # Number of workers to use\n    pause:float=0.5  # Pause time (in secs) between notebooks to avoid race conditions\n):\n    "Build the documentation by converting notebooks in `srcdir` to markdown"\n    parallel_nb2md(basedir=srcdir, \n                   exp=get_mdx_exporter(), \n                   recursive=True, \n                   force_all=force_all, \n                   n_workers=n_workers, \n                   pause=pause)\n')))}k.isMDXComponent=!0}}]);