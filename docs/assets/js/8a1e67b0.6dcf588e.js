"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[233],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,l=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),u=p(n),d=o,m=u["".concat(l,".").concat(d)]||u[d]||f[d]||s;return n?r.createElement(m,i(i({ref:t},c),{},{components:n})):r.createElement(m,i({ref:t},c))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,i=new Array(s);i[0]=u;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a.mdxType="string"==typeof e?e:o,i[1]=a;for(var p=2;p<s;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2331:function(e,t,n){n.r(t),n.d(t,{assets:function(){return f},contentTitle:function(){return p},default:function(){return _},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return u}});var r,o=n(7462),s=n(3366),i=(n(7294),n(3905)),a=["components"],l={},p=void 0,c={unversionedId:"convert",id:"convert",title:"convert",description:"Utilities that help you go from .ipynb -> .md",source:"@site/docs/07_convert.md",sourceDirName:".",slug:"/convert",permalink:"/convert",editUrl:"https://github.com/fastai/nbprocess/tree/main/packages/create-docusaurus/templates/shared/docs/07_convert.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"clean",permalink:"/clean"},next:{title:"06a_media",permalink:"/06a_media"}},f={},u=[{value:"Export -",id:"export--",level:2}],d=(r="CodeOutputBlock",function(e){return console.warn("Component "+r+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",e)}),m={toc:u};function _(e){var t=e.components,n=(0,s.Z)(e,a);return(0,i.kt)("wrapper",(0,o.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"#default_exp convert\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"#export\nfrom __future__ import annotations\nfrom nbprocess.mdx import *\nimport os,sys\n\nfrom nbconvert.exporters import Exporter\nfrom fastcore.all import Path,parallel,call_parse,bool_arg,globtastic\n")),(0,i.kt)("h1",{id:"convert-notebooks-to-markdown"},"Convert Notebooks To Markdown"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Utilities that help you go from .ipynb -> .md")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"_test_fname = Path('../tests/docs_test.ipynb')\n_test_dest = Path('build')\n_test_outp = _test_dest/'docs_test'\n_test_file = _test_dest/'docs_test.md'\n_test_file.unlink(missing_ok=True)\n\nnb2md(_test_fname) # create the markdown file\nassert _test_file.exists() # make sure the markdown file does exist\nassert _test_outp.exists() # make sure the images folder exists\nassert len(_test_file.readlines()) > 10\nassert _test_outp.ls()\n\n_test_file.unlink(missing_ok=True)\n")),(0,i.kt)(d,{lang:"python",mdxType:"CodeOutputBlock"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"converting: ../tests/docs_test.ipynb\n"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"#export\n@call_parse\ndef nbprocess_docs(\n    path:str='.', # path or filename\n    dest:str='build', # path or filename\n    recursive:bool=True, # search subfolders\n    symlinks:bool=True, # follow symlinks?\n    n_workers:int=None, # Number of parallel workers\n    pause:int=0, # Pause between parallel launches\n    force_all:bool=False, # Force rebuild docs that are up-to-date\n    file_glob:str='*.ipynb', # Only include files matching glob\n    file_re:str=None, # Only include files matching regex\n    folder_re:str=None, # Only enter folders matching regex\n    skip_file_glob:str=None, # Skip files matching glob\n    skip_file_re:str=None, # Skip files matching regex\n    skip_folder_re:str='^[_.]' # Skip folders matching regex\n):\n    if os.environ.get('IN_TEST',0): return\n    if not recursive: skip_folder_re='.'\n    files = globtastic(path, symlinks=symlinks, file_glob=file_glob, file_re=file_re,\n                       folder_re=folder_re, skip_file_glob=skip_file_glob,\n                       skip_file_re=skip_file_re, skip_folder_re=skip_folder_re\n                      ).map(Path)\n\n    if len(files)==1: force_all,n_workers = True,0\n    if not force_all:\n        # only rebuild modified files\n        files,_files = [],files.copy()\n        for fname in _files:\n            fname_out = fname.with_suffix('.md')\n            if not fname_out.exists() or os.path.getmtime(fname) >= os.path.getmtime(fname_out): files.append(fname)\n    if len(files)==0: print(\"No notebooks were modified.\")\n    else:\n        if sys.platform == \"win32\": n_workers = 0\n        passed = parallel(nb2md, files, n_workers=n_workers, pause=pause, dest=dest)\n        if not all(passed):\n            msg = \"Conversion failed on the following:\\n\"\n            print(msg + '\\n'.join([f.name for p,f in zip(passed,files) if not p]))\n")),(0,i.kt)("p",null,"You can use ",(0,i.kt)("inlineCode",{parentName:"p"},"nbprocess_docs")," to recursively convert a directory of notebooks to markdown files."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"nbprocess_docs('../tests', recursive=False, n_workers=0, dest='../tests')\n_test_nbs = globtastic('../tests', file_glob='*.ipynb', skip_folder_re='^[_.]').map(Path)\n\nfor f in _test_nbs:\n    assert f.with_suffix('.md').exists(), f'f does not exist.'\n")),(0,i.kt)(d,{lang:"python",mdxType:"CodeOutputBlock"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"converting: ../tests/00_some.thing.ipynb\nconverting: ../tests/docs_test.ipynb\nconverting: ../tests/minimal.ipynb\nconverting: ../tests/01_everything.ipynb\n"))),(0,i.kt)("p",null,"The modified times of notebooks are introspected such notebooks that haven't changed after markdown files have been created will not be converted:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"nbprocess_docs('../tests', recursive=False, n_workers=0, dest='../tests')\n")),(0,i.kt)(d,{lang:"python",mdxType:"CodeOutputBlock"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"No notebooks were modified.\n"))),(0,i.kt)("p",null,"However, you can set ",(0,i.kt)("inlineCode",{parentName:"p"},"force_all")," = ",(0,i.kt)("inlineCode",{parentName:"p"},"True")," to force notebooks to convert:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"nbprocess_docs('../tests', recursive=False, n_workers=0, force_all=True, dest='../tests')\n")),(0,i.kt)(d,{lang:"python",mdxType:"CodeOutputBlock"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"converting: ../tests/00_some.thing.ipynb\nconverting: ../tests/docs_test.ipynb\nconverting: ../tests/minimal.ipynb\nconverting: ../tests/01_everything.ipynb\n"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"#hide\nfor f in _test_nbs: f.with_suffix('.md').unlink(missing_ok=True)\n")),(0,i.kt)("h2",{id:"export--"},"Export -"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"#skip\nfrom nbprocess.export import nbs_export\nnbs_export()\n")))}_.isMDXComponent=!0}}]);