"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[546],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return u}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=o.createContext({}),i=function(e){var t=o.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=i(e.components);return o.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=i(n),u=r,h=d["".concat(p,".").concat(u)]||d[u]||m[u]||a;return n?o.createElement(h,l(l({ref:t},c),{},{components:n})):o.createElement(h,l({ref:t},c))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,l=new Array(a);l[0]=d;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:r,l[1]=s;for(var i=2;i<a;i++)l[i]=n[i];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5282:function(e,t,n){n.r(t),n.d(t,{assets:function(){return m},contentTitle:function(){return i},default:function(){return f},frontMatter:function(){return p},metadata:function(){return c},toc:function(){return d}});var o,r=n(7462),a=n(3366),l=(n(7294),n(3905)),s=["components"],p={},i=void 0,c={unversionedId:"06b_mdx",id:"06b_mdx",title:"06b_mdx",description:"Custom preprocessors that help convert notebook content into MDX",source:"@site/docs/06b_mdx.md",sourceDirName:".",slug:"/06b_mdx",permalink:"/06b_mdx",editUrl:"https://github.com/fastai/nbprocess/tree/main/packages/create-docusaurus/templates/shared/docs/06b_mdx.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"06a_media",permalink:"/06a_media"},next:{title:"index",permalink:"/"}},m={},d=[{value:"Cell Tag Cheatsheet",id:"cell-tag-cheatsheet",level:2},{value:"Show/Hide Cells",id:"showhide-cells",level:3},{value:"Injecting Metadata Into Cells -",id:"injecting-metadata-into-cells--",level:2},{value:"Strip Ansi Characters From Output -",id:"strip-ansi-characters-from-output--",level:2},{value:"Insert Warning Into Markdown -",id:"insert-warning-into-markdown--",level:2},{value:"Remove Empty Code Cells -",id:"remove-empty-code-cells--",level:2},{value:"Turn Metadata into Cell Tags -",id:"turn-metadata-into-cell-tags--",level:2},{value:"Hide Specific Lines of Code -",id:"hide-specific-lines-of-code--",level:2},{value:"Clean Flags and Magics -",id:"clean-flags-and-magics--",level:2},{value:"Format Shell Commands -",id:"format-shell-commands--",level:2},{value:"Remove <code>ShowDoc</code> Input Cells -",id:"remove-showdoc-input-cells--",level:2},{value:"Composing Preprocessors Into A Pipeline",id:"composing-preprocessors-into-a-pipeline",level:2},{value:"Export -",id:"export--",level:2}],u=(o="CodeOutputBlock",function(e){return console.warn("Component "+o+" was not imported, exported, or provided by MDXProvider as global scope"),(0,l.kt)("div",e)}),h={toc:d};function f(e){var t=e.components,n=(0,a.Z)(e,s);return(0,l.kt)("wrapper",(0,r.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"#default_exp mdx\n")),(0,l.kt)("h1",{id:"preprocessors-for-mdx"},"Preprocessors For MDX"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Custom preprocessors that help convert notebook content into MDX")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"# export\nfrom nbprocess.read import get_config\nfrom nbprocess.processor import *\nfrom nbprocess.extract_attachments import ExtractAttachmentsPreprocessor\n\nfrom fastcore.basics import *\nfrom fastcore.foundation import *\nfrom traitlets.config import Config\nfrom pathlib import Path\nimport re, uuid\nfrom nbprocess.media import ImagePath, ImageSave, HTMLEscape\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"#hide\nfrom nbprocess.export import read_nb\nfrom nbconvert import NotebookExporter\nfrom nbprocess.test_utils import run_preprocessor, show_plain_md\n# from nbprocess.run import _gen_nb\nimport json\n\n__file__ = '../nbprocess/export.py'\n_test_file = '../tests/docs_test.ipynb'\n")),(0,l.kt)("p",null,"This module defines ",(0,l.kt)("a",{parentName:"p",href:"https://nbconvert.readthedocs.io/en/latest/nbconvert_library.html#Custom-Preprocessors"},"nbconvert.Custom Preprocessors")," that facilitate transforming notebook content into MDX, which is a variation of markdown."),(0,l.kt)("h2",{id:"cell-tag-cheatsheet"},"Cell Tag Cheatsheet"),(0,l.kt)("p",null,"These preprocessors allow you to make special comments to enable/disable them.  Here is a list of all special comments:"),(0,l.kt)("p",null,"All comments start with ",(0,l.kt)("inlineCode",{parentName:"p"},"#meta")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"#cell_meta"),", which are both aliases for the same thing.  For brevity, we will use ",(0,l.kt)("inlineCode",{parentName:"p"},"#meta")," in this cheatsheet."),(0,l.kt)("h3",{id:"showhide-cells"},"Show/Hide Cells"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Remove entire cells:  ",(0,l.kt)("inlineCode",{parentName:"li"},"#meta:tag=remove_cell")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"#meta:tag=hide")),(0,l.kt)("li",{parentName:"ol"},"Remove output: ",(0,l.kt)("inlineCode",{parentName:"li"},"#meta:tag=remove_output")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"#meta:tag=remove_output")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"#meta:tag=hide_outputs")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"#meta:tag=hide_output")),(0,l.kt)("li",{parentName:"ol"},"Remove input: same as above, except ",(0,l.kt)("inlineCode",{parentName:"li"},"input")," instead of ",(0,l.kt)("inlineCode",{parentName:"li"},"output"),".")),(0,l.kt)("h2",{id:"injecting-metadata-into-cells--"},"Injecting Metadata Into Cells -"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"#export\n_re_meta= r'^\\s*#(?:cell_meta|meta):\\S+\\s*[\\n\\r]'\n\n@preprocess_cell\ndef InjectMeta(cell):\n    \"Inject metadata into a cell for further preprocessing with a comment.\"\n    _pattern = r'(^\\s*#(?:cell_meta|meta):)(\\S+)(\\s*[\\n\\r])'\n    if cell.cell_type == 'code' and re.search(_re_meta, cell.source, flags=re.MULTILINE):\n        cell_meta = re.findall(_pattern, cell.source, re.MULTILINE)\n        d = cell.metadata.get('nbprocess', {})\n        for _, m, _ in cell_meta:\n            if '=' in m:\n                k,v = m.split('=')\n                d[k] = v\n            else: print(f\"Warning cell_meta:{m} does not have '=' will be ignored.\")\n        cell.metadata['nbprocess'] = d\n")),(0,l.kt)("p",null,"To inject metadata make a comment in a cell with the following pattern: ",(0,l.kt)("inlineCode",{parentName:"p"},"#cell_meta:{key=value}"),". Note that ",(0,l.kt)("inlineCode",{parentName:"p"},"#meta")," is an alias for ",(0,l.kt)("inlineCode",{parentName:"p"},"#cell_meta")),(0,l.kt)("p",null,"For example, consider the following code:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"_test_file = '../tests/docs_test.ipynb'\nfirst_cell = read_nb(_test_file)['cells'][2]\nprint(first_cell['source'])\n")),(0,l.kt)(u,{lang:"python",mdxType:"CodeOutputBlock"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"#meta:show_steps=start,train\nimport re\n"))),(0,l.kt)("p",null,"At the moment, this cell has no metadata:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"first_cell.metadata\n")),(0,l.kt)(u,{lang:"python",mdxType:"CodeOutputBlock"}),(0,l.kt)("p",null,"However, after we process this notebook with ",(0,l.kt)("inlineCode",{parentName:"p"},"InjectMeta"),", the appropriate metadata will be injected:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"c = Config()\nc.NotebookExporter.preprocessors = [InjectMeta]\nexp = NotebookExporter(config=c)\ncells, _ = exp.from_filename(_test_file)\nfirst_cell = json.loads(cells)['cells'][2]\n\nassert first_cell['metadata'] == {'nbprocess': {'show_steps': 'start,train'}}\n")),(0,l.kt)("h2",{id:"strip-ansi-characters-from-output--"},"Strip Ansi Characters From Output -"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"#export\n_re_ansi_escape = re.compile(r'\\x1B(?:[@-Z\\\\-_]|\\[[0-?]*[ -/]*[@-~])')\n\n@preprocess_cell\ndef StripAnsi(cell):\n    \"Strip Ansi Characters.\"\n    for o in cell.get('outputs', []):\n        if o.get('name') == 'stdout': o['text'] = _re_ansi_escape.sub('', o.text)\n")),(0,l.kt)("p",null,"Gets rid of colors that are streamed from standard out, which can interfere with static site generators:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"c, _ = run_preprocessor([StripAnsi], _test_file)\nassert not _re_ansi_escape.findall(c)\n")),(0,l.kt)("h2",{id:"insert-warning-into-markdown--"},"Insert Warning Into Markdown -"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'# export\n@preprocess\ndef InsertWarning(nb):\n    """Insert Autogenerated Warning Into Notebook after the first cell."""\n    content = "\x3c!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! --\x3e"\n    mdcell = AttrDict(cell_type=\'markdown\', id=uuid.uuid4().hex[:36], metadata={}, source=content)\n    nb.cells.insert(1, mdcell)\n')),(0,l.kt)("p",null,"This preprocessor inserts a warning in the markdown destination that the file is autogenerated.  This warning is inserted in the second cell so we do not interfere with front matter."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'c, _ = run_preprocessor([InsertWarning], _test_file)\nassert "\x3c!-- WARNING: THIS FILE WAS AUTOGENERATED!" in c\n')),(0,l.kt)("h2",{id:"remove-empty-code-cells--"},"Remove Empty Code Cells -"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"# export\ndef _keepCell(cell): return cell['cell_type'] != 'code' or cell.source.strip()\n\n@preprocess\ndef RmEmptyCode(nb):\n    \"Remove empty code cells.\"\n    nb.cells = filter(_keepCell,nb.cells)\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"c, _ = run_preprocessor([RmEmptyCode], _test_file)\nassert '```python\\n\\n```' not in c\n")),(0,l.kt)("h2",{id:"turn-metadata-into-cell-tags--"},"Turn Metadata into Cell Tags -"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"#export\n@preprocess_cell\ndef UpdateTags(cell):\n    root = cell.metadata.get('nbprocess', {})\n    tags = root.get('tags', root.get('tag')) # allow the singular also\n    if tags: cell.metadata['tags'] = cell.metadata.get('tags', []) + tags.split(',')\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"UpdateTags")," is meant to be used with ",(0,l.kt)("inlineCode",{parentName:"p"},"InjectMeta")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"TagRemovePreprocessor")," to configure the visibility of cells in rendered docs."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"# Configure an exporter from scratch\nc = Config()\nc.TagRemovePreprocessor.remove_cell_tags = (\"remove_cell\",)\nc.TagRemovePreprocessor.remove_all_outputs_tags = ('remove_output',)\nc.TagRemovePreprocessor.remove_input_tags = ('remove_input',)\nc.MarkdownExporter.preprocessors = [InjectMeta, UpdateTags, TagRemovePreprocessor]\nexp = MarkdownExporter(config=c)\nresult = exp.from_filename(_test_file)[0]\n\n# show the results\nassert 'you will not be able to see this cell at all either' not in result\n")),(0,l.kt)("h2",{id:"hide-specific-lines-of-code--"},"Hide Specific Lines of Code -"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"#export\n@preprocess_cell\ndef HideInputLines(cell):\n    \"Hide lines of code in code cells with the comment `#meta_hide_line` at the end of a line of code.\"\n    tok = '#meta_hide_line'\n    if cell.cell_type == 'code' and tok in cell.source:\n        cell.source = '\\n'.join([c for c in cell.source.splitlines() if not c.strip().endswith(tok)])\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'c, _ = run_preprocessor([InjectMeta, HideInputLines], _test_file)\n\n_res = """```python\ndef show():\n    a = 2\n```"""\nassert _res in c\n')),(0,l.kt)("h2",{id:"clean-flags-and-magics--"},"Clean Flags and Magics -"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"#export\n_tst_flags = get_config()['tst_flags'].split('|')\n\n@preprocess_cell\ndef CleanFlags(cell):\n    \"A preprocessor to remove Flags\"\n    if cell.cell_type != 'code': return\n    for p in [re.compile(r'^#\\s*{0}\\s*'.format(f), re.MULTILINE) for f in _tst_flags]:\n        cell.source = p.sub('', cell.source).strip()\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"c, _ = run_preprocessor([CleanFlags], _test_file)\nassert '#notest' not in c\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"#export\n@preprocess_cell\ndef CleanMagics(cell):\n    \"A preprocessor to remove cell magic commands and #cell_meta: comments\"\n    pattern = re.compile(r'(^\\s*(%%|%).+?[\\n\\r])|({0})'.format(_re_meta), re.MULTILINE)\n    if cell.cell_type == 'code': cell.source = pattern.sub('', cell.source).strip()\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"CleanMagics")," strips magic cell commands ",(0,l.kt)("inlineCode",{parentName:"p"},"%%")," so they do not appear in rendered markdown files:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"c, _ = run_preprocessor([CleanMagics], _test_file)\nassert '%%' not in c\n")),(0,l.kt)("h2",{id:"format-shell-commands--"},"Format Shell Commands -"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"#export\n@preprocess_cell\ndef BashIdentify(cell):\n    \"A preprocessor to identify bash commands and mark them appropriately\"\n    pattern = re.compile('^\\s*!', flags=re.MULTILINE)\n    if cell.cell_type == 'code' and pattern.search(cell.source):\n        cell.metadata.magics_language = 'bash'\n        cell.source = pattern.sub('', cell.source).strip()\n")),(0,l.kt)("p",null,"When we issue a shell command in a notebook with ",(0,l.kt)("inlineCode",{parentName:"p"},"!"),", we need to change the code-fence from ",(0,l.kt)("inlineCode",{parentName:"p"},"python")," to ",(0,l.kt)("inlineCode",{parentName:"p"},"bash")," and remove the ",(0,l.kt)("inlineCode",{parentName:"p"},"!"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'c, _ = run_preprocessor([BashIdentify], _test_file)\nassert "```bash" in c\n')),(0,l.kt)("h2",{id:"remove-showdoc-input-cells--"},"Remove ",(0,l.kt)("inlineCode",{parentName:"h2"},"ShowDoc")," Input Cells -"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"#export\n_re_showdoc = re.compile(r'^ShowDoc', re.MULTILINE)\n\ndef _isShowDoc(cell):\n    \"Return True if cell contains ShowDoc.\"\n    return cell['cell_type'] == 'code' and _re_showdoc.search(cell.source)\n\n@preprocess_cell\ndef CleanShowDoc(cell):\n    \"Ensure that ShowDoc output gets cleaned in the associated notebook.\"\n    _re_html = re.compile(r'<HTMLRemove>.*</HTMLRemove>', re.DOTALL)\n    if not _isShowDoc(cell): return\n    all_outs = [o['data'] for o in cell.outputs if 'data' in o]\n    html_outs = [o['text/html'] for o in all_outs if 'text/html' in o]\n    if len(html_outs) != 1: return\n    cleaned_html = self._re_html.sub('', html_outs[0])\n    return AttrDict({'cell_type':'raw', 'id':cell.id, 'metadata':cell.metadata, 'source':cleaned_html})\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"_result, _ = run_preprocessor([CleanShowDoc], _test_file)\nassert '<HTMLRemove>' not in _result\n")),(0,l.kt)("h2",{id:"composing-preprocessors-into-a-pipeline"},"Composing Preprocessors Into A Pipeline"),(0,l.kt)("p",null,"Lets see how you can compose all of these preprocessors together to process notebooks appropriately:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'#export\ndef get_mdx_exporter(template_file=\'ob.tpl\'):\n    """A mdx notebook exporter which composes many pre-processors together."""\n    c = Config()\n    c.TagRemovePreprocessor.remove_cell_tags = ("remove_cell", "hide")\n    c.TagRemovePreprocessor.remove_all_outputs_tags = ("remove_output", "remove_outputs", "hide_output", "hide_outputs")\n    c.TagRemovePreprocessor.remove_input_tags = (\'remove_input\', \'remove_inputs\', "hide_input", "hide_inputs")\n    pp = [InjectMeta, CleanMagics, BashIdentify, UpdateTags, InsertWarning, TagRemovePreprocessor,\n          CleanFlags, CleanShowDoc, RmEmptyCode, StripAnsi, HideInputLines, ExtractAttachmentsPreprocessor,\n          ImageSave, ImagePath, HTMLEscape]\n    c.MarkdownExporter.preprocessors = pp\n    tmp_dir = Path(__file__).parent/\'templates/\'\n    tmp_file = tmp_dir/f"{template_file}"\n    if not tmp_file.exists(): raise ValueError(f"{tmp_file} does not exist in {tmp_dir}")\n    c.MarkdownExporter.template_file = str(tmp_file)\n    return MarkdownExporter(config=c)\n')),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"get_mdx_exporter")," combines all of the previous preprocessors, along with the built in ",(0,l.kt)("inlineCode",{parentName:"p"},"TagRemovePreprocessor")," to allow for hiding cell inputs/outputs based on cell tags."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"exp = get_mdx_exporter()\nprint(exp.from_filename(_test_file)[0])\n")),(0,l.kt)(u,{lang:"python",mdxType:"CodeOutputBlock"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'## a title\n\n\x3c!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! --\x3e\n\nsome md\n\n\n```python\nimport re\n```\n\n\n```python\nprint(\'\\033[94mhello\')\n```\n\n<CodeOutputBlock lang="python">\n\n    hello\n\n\n</CodeOutputBlock>\n\n\n```python\n1+1\n```\n\n<CodeOutputBlock lang="python">\n\n\n\n\n    2\n\n\n\n</CodeOutputBlock>\n\n\n```python\nimport pandas as pd\npd.DataFrame(dict(a=[1,2]))\n```\n    \n<HTMLOutputBlock >\n\n\n\n\n```html\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border="1" class="dataframe">\n  <thead>\n    <tr style="text-align: right;">\n      <th></th>\n      <th>a</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n\n\n\n</HTMLOutputBlock>\n\n\n```python\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(2,1))\nplt.plot([1,2]);\n```\n\n<CodeOutputBlock lang="python">\n\n\n    \n![png](_docs_test_files/output_6_0.png)\n    \n\n\n</CodeOutputBlock>\n\nMy pic:\n![image-2.png](attach_8_image-2.png)\n\n\n```python\nprint(\'the output is removed, so you can only see the print statement.\')\n```\n\n<CodeOutputBlock lang="python">\n\n    hello, you cannot see the code that created me.\n\n\n</CodeOutputBlock>\n\n\n```python\ndef show():\n    a = 2\n```\n\n\n```python\nprint(\'hi\')\n```\n\n<CodeOutputBlock lang="python">\n\n    hi\n    CPU times: user 112 \xb5s, sys: 37 \xb5s, total: 149 \xb5s\n    Wall time: 120 \xb5s\n\n\n</CodeOutputBlock>\n\n\n```bash\necho hi\n```\n\n<CodeOutputBlock lang="bash">\n\n    hi\n\n\n</CodeOutputBlock>\n\n\n```python\ndef ShowDoc(a): ...\n```\n\n\n```python\nShowDoc(1)\n```\n'))),(0,l.kt)("h2",{id:"export--"},"Export -"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"#skip\nfrom nbprocess.export import nbs_export\nnbs_export()\n")))}f.isMDXComponent=!0}}]);